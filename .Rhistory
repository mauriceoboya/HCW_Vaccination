install.packages('geoR')
install.packages('leaflet')
install.packages('SpatialEpi')
install.packages('SpatialEpiApp')
install.packages('INLA',repos='https://inla.r-inla-download.org/R/stable')
install.packages('SpatialEpiApp')
install.packages('SpatialEpiApp', repos='http://cran.us.r-project.org')
install.packages('sp')
install.packages('spdep')
install.packages('raster')
install.packages('SpatialEpiApp')
install.packages("SpatialEpiApp")
install_github("Paula-Moraga/SpatialEpiApp")
library(devtools)
install.packages('devtools')
install_github("Paula-Moraga/SpatialEpiApp")
library(devtools)
install_github("Paula-Moraga/SpatialEpiApp")
library(SpatialEpiApp)
library(SpatialEpi)
install_github("Paula-Moraga/SpatialEpiApp")
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(name='oboyamaurice',
token='62648A381521361D16064CD5406B4FB1',
secret='nLzKEUK5E5sdqLpoKEQRNR/72SjhuRKtSTtjniDw')
shiny::runApp('obiz')
runApp('obiz')
runApp('obiz')
attach(scotland)
names(scotland)
head(scotland_sf)
head(scotland$data)
head(scotland$geo)
head(scotland$polygon)
map<-scotland$spatial.polygon
plot(map)
dataset <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
head(dataset)
unique(dataset$subcounty)
head(dataset,8)
head(dataset,15)
library(shiny); runApp('testing/test.R')
head(dataset,15)
unique(dataset$subcounty)
import pandas as pd
import pandas as pd
import pandas as pd
# Sample Data
df <- data.frame(
sub_county = c("Mumias West", "Lurambi", "Shinyalu", "Matungu", "Likuyani", "Lugari",
"Butere", "Khwisero", "Mumias East", "Malava", "Navakholo", "Ikolomani", "CHMT"),
value = c(1, 2, 3, 4, 5, 6)
)
# Sample Data
df <- data.frame(
sub_county = c("Mumias West", "Lurambi", "Shinyalu", "Matungu", "Likuyani", "Lugari",
"Butere", "Khwisero", "Mumias East", "Malava", "Navakholo", "Ikolomani", "CHMT"),
value = c(1, 2, 3, 4, 5, 6)
)
# Sample Data
df <- data.frame(
sub_county = c("Mumias West", "Lurambi", "Shinyalu", "Matungu", "Likuyani", "Lugari",
"Butere", "Khwisero", "Mumias East", "Malava", "Navakholo", "Ikolomani", "CHMT"),
value = c(1, 2, 3, 4, 5, 6)
)
# Sample Data
df <- data.frame(
sub_county = c("Mumias West", "Lurambi", "Shinyalu", "Matungu", "Likuyani", "Lugari",
"Butere", "Khwisero", "Mumias East", "Malava", "Navakholo", "Ikolomani", "CHMT"),
value = c(1, 2, 3, 4, 5, 6)
)
# Sample Data
df <- data.frame(
sub_county = c("Mumias West", "Lurambi", "Shinyalu", "Matungu", "Likuyani", "Lugari",
"Butere", "Khwisero", "Mumias East", "Malava", "Navakholo", "Ikolomani", "CHMT"),
value = c(1, 2, 3, 4, 5, 6,7,8,9,10,11,12,13)
)
# Provided Coordinates-
latitude <- c(0.536, -0.238, -0.238, -0.238, -0.238, 0.204, 0.275,-0.57,0.536, -0.238,-0.238, -0.238,-0.238)
longitude <- c(34.753, 34.637, 34.637, 34.637, 34.637, 34.860, 34.729,34.753,34.753, 34.637, 34.637, 34.637, 34.637)
# Create a data frame with sub_county and coordinates
coordinates_df <- data.frame(
sub_county = df$sub_county,
latitude = latitude,
longitude = longitude
)
# Merge the two data frames based on sub_county
merged_df <- merge(df, coordinates_df, by = "sub_county")
# Display the updated DataFrame
print(merged_df)
# Sample Data
df <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
# Provided Coordinates-
latitude <- c(0.536, -0.238, -0.238, -0.238, -0.238, 0.204, 0.275,-0.57,0.536, -0.238,-0.238, -0.238,-0.238)
longitude <- c(34.753, 34.637, 34.637, 34.637, 34.637, 34.860, 34.729,34.753,34.753, 34.637, 34.637, 34.637, 34.637)
# Create a data frame with sub_county and coordinates
coordinates_df <- data.frame(
sub_county = df$sub_county,
latitude = latitude,
longitude = longitude
)
dataset <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
head(dataset,15)
# Sample Data
df <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
# Provided Coordinates-
latitude <- c(0.536, -0.238, -0.238, -0.238, -0.238, 0.204, 0.275,-0.57,0.536, -0.238,-0.238, -0.238,-0.238)
longitude <- c(34.753, 34.637, 34.637, 34.637, 34.637, 34.860, 34.729,34.753,34.753, 34.637, 34.637, 34.637, 34.637)
# Create a data frame with sub_county and coordinates
coordinates_df <- data.frame(
subcounty  = df$subcounty ,
latitude = latitude,
longitude = longitude
)
# Sample Data
df <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
# Provided Coordinates
latitude <- c(0.536, -0.238, -0.238, -0.238, -0.238, 0.204, 0.275, -0.57, 0.536, -0.238, -0.238, -0.238, -0.238)
longitude <- c(34.753, 34.637, 34.637, 34.637, 34.637, 34.860, 34.729, 34.753, 34.753, 34.637, 34.637, 34.637, 34.637)
# Create a data frame with sub_county and coordinates
coordinates_df <- data.frame(
subcounty = df$subcounty,
latitude = latitude,
longitude = longitude
)
# Sample Data
df <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
# Provided Coordinates
latitude <- c(0.536, -0.238, -0.238, -0.238, -0.238, 0.204, 0.275, -0.57, 0.536, -0.238, -0.238, -0.238, -0.238)
longitude <- c(34.753, 34.637, 34.637, 34.637, 34.637, 34.860, 34.729, 34.753, 34.753, 34.637, 34.637, 34.637, 34.637)
# Ensure that the number of unique subcounties is the same
unique_subcounties <- unique(df$subcounty)
coordinates_df <- data.frame(
subcounty = unique_subcounties,
latitude = latitude[1:length(unique_subcounties)],
longitude = longitude[1:length(unique_subcounties)]
)
# Merge the two data frames based on sub_county
merged_df <- merge(df, coordinates_df, by = "subcounty")
# Display the updated DataFrame
print(merged_df)
runApp('testing/test.R')
runApp('testing/test.R')
runApp('testing/test.R')
# Display the updated DataFrame
head(merged_df)
# Display the updated DataFrame
unique(merged$latitude)
# Display the updated DataFrame
unique(merged_df$latitude)
# Display the updated DataFrame
unique(merged_df$longitude)
# Write merged_df to a CSV file
write.csv(merged_df, file = '/home/fibonacci/Downloads/tex.csv', row.names = FALSE)
# Sample Data
df <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
# Provided Coordinates
latitude <- c(0.536, -0.238, -0.238, -0.238, -0.238, 0.204, 0.275, -0.57, 0.536, -0.238, -0.238, -0.238, -0.238)
longitude <- c(34.753, 34.637, 34.637, 34.637, 34.637, 34.860, 34.729, 34.753, 34.753, 34.637, 34.637, 34.637, 34.637)
# Ensure that the number of unique subcounties is the same
unique_subcounties <- unique(df$subcounty)
coordinates_df <- data.frame(
subcounty = unique_subcounties,
latitude = latitude[1:length(unique_subcounties)],
longitude = longitude[1:length(unique_subcounties)]
)
# Merge the two data frames based on sub_county
merged_df <- merge(df, coordinates_df, by = "subcounty")
# Display the updated DataFrame
unique(merged_df$longitude)
# Write merged_df to a CSV file
write.csv(merged_df, file = '/home/fibonacci/Downloads/tex.csv', row.names = FALSE)
runApp('testing/test.R')
dataset <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
head(dataset,15)
runApp('testing/test.R')
dataset <- readRDS(file = '/home/fibonacci/Downloads/HCWDashboard.rds')
head(dataset,15)
runApp('testing/test.R')
runApp('testing/test.R')
runApp('testing/test.R')
runApp('HCWs')
runApp('HCWs')
runApp('testing/test.R')
runApp('testing/test.R')
runApp('testing/test.R')
runApp('testing/test.R')
runApp('testing/test.R')
# Create a bar plot
progress_plot <- ggplot(progress_data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = paste("Progress Towards Vaccination Goal (", round(progress_percentage, 1), "%)"),
x = "Category",
y = "Count") +
geom_text(aes(label = paste("Count: ", Count)), vjust = -0.5) +
theme_minimal()
runApp('testing/test.R')
runApp('HCWs')
runApp('testing/test.R')
runApp('testing/test.R')
runApp('testing/test.R')
runApp('HCWs')
runApp('testing/test.R')
library(shiny); runApp('testing/test.R')
runApp('testing/test.R')
employee_data <- read.csv('/home/fibonacci/sama_analysis_dashboard/daat.csv')
case_study_2_data <- read.csv('/home/fibonacci/sama_analysis_dashboard/daats.csv')
head(employee_data)
head(employee_data,10)
# Descriptive Statistics
summary(employee_data)
# Project-wise Analysis
project_avg <- employee_data %>%
group_by(Project) %>%
summarise(
Avg_Productivity = mean(Productivity_Score),
Avg_Quality = mean(Quality_Score),
Avg_Attendance = mean(Attendance_Score)
)
library(dplyr)
library(ggplot2)
# Project-wise Analysis
project_avg <- employee_data %>%
group_by(Project) %>%
summarise(
Avg_Productivity = mean(Productivity_Score),
Avg_Quality = mean(Quality_Score),
Avg_Attendance = mean(Attendance_Score)
)
View(project_avg)
library(dplyr)
library(ggplot2)
# Descriptive Statistics
summary(employee_data)
employee_data <- na.omit(employee_data)
# Project-wise Analysis
project_avg <- employee_data %>%
group_by(Project) %>%
summarise(
Avg_Productivity = mean(Productivity_Score),
Avg_Quality = mean(Quality_Score),
Avg_Attendance = mean(Attendance_Score)
)
View(project_avg)
ndividual_performance <- data %>%
mutate(Avg_Score = rowMeans(select(., -c(Employee.No, Project))))
ndividual_performance <- data %>%
mutate(Avg_Score = rowMeans(select(., -c(Employee.No, Project))))
individual_performance <- data %>%
mutate(Avg_Score = rowMeans(select(., -c(Employee.No, Project))))
individual_performance <- employee_data %>%
mutate(Avg_Score = rowMeans(select(., -c(Employee.No, Project))))
View(individual_performance)
correlation_matrix <- cor(employee_data[, c("Productivity_Score", "Quality_Score", "Attendance_Score")])
View(correlation_matrix)
# Project Comparison (Visualization)
ggplot(employee_data, aes(x = Project, y = Productivity_Score, fill = Project)) +
geom_boxplot() +
labs(title = "Project Comparison - Productivity Score")
outliers <- (employee_data %>%
)
outliers <- (employee_data %>%
filter(
Productivity_Score > quantile(Productivity_Score, 0.75) + 1.5 * IQR(Productivity_Score) |
Quality_Score > quantile(Quality_Score, 0.75) + 1.5 * IQR(Quality_Score) |
Attendance_Score > quantile(Attendance_Score, 0.75) + 1.5 * IQR(Attendance_Score)
)
print(project_avg)
print(individual_performance)
print(correlation_matrix)
print(outliers)
outliers <- employee_data %>%
filter(
Productivity_Score > quantile(Productivity_Score, 0.75) + 1.5 * IQR(Productivity_Score) |
Quality_Score > quantile(Quality_Score, 0.75) + 1.5 * IQR(Quality_Score) |
Attendance_Score > quantile(Attendance_Score, 0.75) + 1.5 * IQR(Attendance_Score)
)
View(outliers)
print(project_avg)
print(individual_performance)
print(correlation_matrix)
print(outliers)
View(project_avg)
ggplot(project_avg_long, aes(x = Project, y = Average_Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Project-wise Performance",
subtitle = "Average Productivity, Quality, and Attendance Scores",
x = "Project", y = "Average Score",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "top")
ggplot(project_avg, aes(x = Project, y = Average_Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Project-wise Performance",
subtitle = "Average Productivity, Quality, and Attendance Scores",
x = "Project", y = "Average Score",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "top")
project_avg_long <- project_avg %>%
pivot_longer(cols = c(Avg_Productivity, Avg_Quality, Avg_Attendance),
names_to = "Metric", values_to = "Average_Score")
library(ggplot2)
project_avg_long <- project_avg %>%
pivot_longer(cols = c(Avg_Productivity, Avg_Quality, Avg_Attendance),
names_to = "Metric", values_to = "Average_Score")
project_avg_long <- project_avg %>%
gather(key = "Metric", value = "Average_Score", -Project)
library(dplyr)
project_avg_long <- project_avg %>%
gather(key = "Metric", value = "Average_Score", -Project)
project_avg_long <- project_avg %>%
tidyr::gather(key = "Metric", value = "Average_Score", -Project)
View(project_avg_long)
# Plotting
ggplot(project_avg_long, aes(x = Project, y = Average_Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Project-wise Performance",
subtitle = "Average Productivity, Quality, and Attendance Scores",
x = "Project", y = "Average Score",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "top")
# Plotting
ggplot(project_avg_long, aes(x = Project, y = Average_Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Project-wise Performance",
subtitle = "Average Productivity, Quality, and Attendance Scores",
x = "Project", y = "Average Score",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Plotting
ggplot(project_avg_long, aes(x = Project, y = Average_Score, fill = Metric)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Project-wise Performance",
subtitle = "Average Productivity, Quality, and Attendance Scores",
x = "Project", y = "Average Score",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
individual_performance <- employee_data %>%
mutate(Avg_Score = rowMeans(select(., -c(Employee.No, Project))))
correlation_matrix <- cor(employee_data[, c("Productivity_Score", "Quality_Score", "Attendance_Score")])
# Project Comparison (Visualization)
ggplot(employee_data, aes(x = Project, y = Productivity_Score, fill = Project)) +
geom_boxplot() +
labs(title = "Project Comparison - Productivity Score")
head(case_study_2_data,10)
capacity_data <- read.csv('/home/fibonacci/sama_analysis_dashboard/daats.csv')
head(capacity_data,10)
# Calculate capacity gap
capacity_data$Capacity_Gap <- capacity_data$Project_Required_Head_Count - capacity_data$Total_Available_Headcount
# Visualization
# Bar chart for Required and Available Headcounts
ggplot(capacity_data, aes(x = Sub_project_ID)) +
geom_bar(aes(y = Project_Required_Head_Count, fill = "Required"), stat = "identity") +
geom_bar(aes(y = Total_Available_Headcount, fill = "Available"), stat = "identity", position = "dodge") +
labs(title = "Capacity Planning Overview",
x = "Subproject ID", y = "Headcount",
fill = "Headcount Type") +
theme_minimal()
# Bar chart for Capacity Gaps
ggplot(capacity_data, aes(x = Sub_project_ID, y = Capacity_Gap)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Capacity Gap Analysis",
x = "Subproject ID", y = "Capacity Gap") +
theme_minimal()
# Calculate capacity gap
capacity_data$Capacity_Gap <- capacity_data$Project_Required_Head_Count - capacity_data$Total_Available_Headcount
# Visualization
# Bar chart for Required and Available Headcounts
ggplot(capacity_data, aes(x = Sub_project_ID)) +
geom_bar(aes(y = Project_Required_Head_Count, fill = "Required"), stat = "identity") +
geom_bar(aes(y = Total_Available_Headcount, fill = "Available"), stat = "identity", position = "dodge") +
labs(title = "Capacity Planning Overview",
x = "Subproject ID", y = "Headcount",
fill = "Headcount Type") +
theme_minimal()
library(shiny); runApp('sama_analysis_dashboard/sama.R')
# Calculate capacity gap
capacity_data$Capacity_Gap <- capacity_data$Total_Available_Headcount-capacity_data$Project_Required_Head_Count
# Visualization
# Bar chart for Required and Available Headcounts
ggplot(capacity_data, aes(x = Sub_project_ID)) +
geom_bar(aes(y = Project_Required_Head_Count, fill = "Required"), stat = "identity") +
geom_bar(aes(y = Total_Available_Headcount, fill = "Available"), stat = "identity", position = "dodge") +
labs(title = "Capacity Planning Overview",
x = "Subproject ID", y = "Headcount",
fill = "Headcount Type") +
theme_minimal()
# Bar chart for Capacity Gaps
ggplot(capacity_data, aes(x = Sub_project_ID, y = Capacity_Gap)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Capacity Gap Analysis",
x = "Subproject ID", y = "Capacity Gap") +
theme_minimal()
runApp('sama_analysis_dashboard/sama.R')
library(shiny); runApp('sama_analysis_dashboard/sama.R')
shiny::runApp('HCW_Vaccination')
